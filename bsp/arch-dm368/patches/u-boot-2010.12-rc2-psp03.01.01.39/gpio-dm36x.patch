Index: u-boot-2010.12-rc2-psp03.01.01.39/src/drivers/gpio/davinci_gpio.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ u-boot-2010.12-rc2-psp03.01.01.39/src/drivers/gpio/davinci_gpio.c	2012-01-21 16:55:30.845846828 -0700
@@ -0,0 +1,178 @@
+/*
+ *
+ * (c) 20100 Ridgerun, Todd Fischer <todd.fischer@ridgerun.com>
+ *
+ * Based on MXC specific GPIO work by Sascha Hauer
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <common.h>
+#include <gpio.h>
+#include <asm/io.h>
+#include <asm/types.h>
+
+#define DAVINCI_GPIO_BASE (void *)(0x01C67000)
+#define DAVINCI_MAX_GPIO 103
+
+#ifdef CONFIG_DAVINCI_GPIO_DEBUG
+#define GPIO_DBG(fmt,args...)	printf (fmt ,##args)
+#else
+#define GPIO_DBG(fmt,args...) do {} while (0)
+#endif
+
+struct gpio_controller {
+	u32	dir;
+	u32	out_data;
+	u32	set_data;
+	u32	clr_data;
+	u32	in_data;
+	u32	set_rising;
+	u32	clr_rising;
+	u32	set_falling;
+	u32	clr_falling;
+	u32	intstat;
+};
+
+static struct gpio_controller *gpio_to_controller(unsigned gpio)
+{
+	void *ptr;
+	void *base = DAVINCI_GPIO_BASE;
+
+	if (gpio < 32 * 1)
+		ptr = base + 0x10;
+	else if (gpio < 32 * 2)
+		ptr = base + 0x38;
+	else if (gpio < 32 * 3)
+		ptr = base + 0x60;
+	else if (gpio < 32 * 4)
+		ptr = base + 0x88;
+	else if (gpio < 32 * 5)
+		ptr = base + 0xb0;
+	else
+		ptr = NULL;
+	return ptr;
+}
+
+static inline u32 gpio_mask(unsigned gpio)
+{
+	return 1 << (gpio % 32);
+}
+
+static inline u32 gpio_reg_read(void *reg)
+{
+	u32 val = __raw_readl(reg);
+
+	GPIO_DBG("%s [0x%p] --> 0x%8.8X\n", __FUNCTION__, reg, val);
+
+	return val;
+}
+
+static inline void gpio_reg_write(u32 val, void *reg)
+{
+
+	GPIO_DBG("%s [0x%p] <-- 0x%8.8X\n", __FUNCTION__, reg, val);
+
+	__raw_writel(val, reg);
+}
+
+int gpio_max_ios(void)
+{
+	return DAVINCI_MAX_GPIO;
+}
+
+int gpio_dir(unsigned int gpio, enum gpio_direction direction)
+{
+	struct gpio_controller	*g;
+	u32			mask;
+	u32			temp;
+
+	GPIO_DBG("%s ENTRY: gpio %d direction %d\n", __FUNCTION__, gpio, direction);
+
+	g = gpio_to_controller(gpio);
+
+	if (!g) {
+		return -1;
+	}
+
+	mask = gpio_mask(gpio);
+
+	temp = gpio_reg_read(&g->dir);
+
+	if (direction == GPIO_DIRECTION_IN)
+		temp |= mask;
+	else
+		temp &= ~mask;
+
+	gpio_reg_write(temp, &g->dir);
+	return 0;
+}
+
+/* Set the value, then set the direction to out
+ * to avoid an unintended glitch on the GPIO pin.
+ */
+
+int gpio_set(unsigned int gpio, unsigned int value)
+{
+	struct gpio_controller	*g;
+	u32			mask;
+
+	GPIO_DBG("%s ENTRY: gpio %d value %d\n", __FUNCTION__, gpio, value);
+
+	g = gpio_to_controller(gpio);
+	if (!g) {
+		return -1;
+	}
+
+	mask = gpio_mask(gpio);
+
+	if (value)
+		gpio_reg_write(mask, &g->set_data);
+	else
+		gpio_reg_write(mask, &g->clr_data);
+
+	return 0;
+}
+
+int gpio_get(unsigned int gpio, enum gpio_direction *direction, int *value)
+{
+	struct gpio_controller	*g;
+	u32			mask;
+
+	GPIO_DBG("%s ENTRY: gpio %d\n", __FUNCTION__, gpio);
+
+	g = gpio_to_controller(gpio);
+	if (!g) {
+		return -1;
+	}
+
+	mask = gpio_mask(gpio);
+
+	if (gpio_reg_read(&g->dir) & mask)
+		*direction = GPIO_DIRECTION_IN;
+	else
+		*direction = GPIO_DIRECTION_OUT;
+
+	if (gpio_reg_read(&g->in_data) & mask)
+		*value = 1;
+	else
+		*value = 0;
+
+	return 0;
+}
Index: u-boot-2010.12-rc2-psp03.01.01.39/src/include/gpio.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ u-boot-2010.12-rc2-psp03.01.01.39/src/include/gpio.h	2012-01-21 16:40:14.037192481 -0700
@@ -0,0 +1,42 @@
+/*
+ *
+ * (c) 20100 Ridgerun, Todd Fischer <todd.fischer@ridgerun.com>
+ *
+ * Based on MXC specific GPIO work by Sascha Hauer
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#ifndef __GPIO_H
+#define __GPIO_H
+
+#ifdef CONFIG_GPIO
+enum gpio_direction {
+	GPIO_DIRECTION_IN,
+	GPIO_DIRECTION_OUT,
+};
+
+extern int gpio_max_ios(void);
+extern int gpio_dir(unsigned int gpio, enum gpio_direction direction);
+extern int gpio_set(unsigned int gpio, unsigned int value);
+extern int gpio_get(unsigned int gpio, enum gpio_direction *direction, int *value);
+#endif
+
+#endif
+
Index: u-boot-2010.12-rc2-psp03.01.01.39/src/drivers/gpio/Makefile
===================================================================
--- u-boot-2010.12-rc2-psp03.01.01.39.orig/src/drivers/gpio/Makefile	2012-01-21 16:40:10.552931642 -0700
+++ u-boot-2010.12-rc2-psp03.01.01.39/src/drivers/gpio/Makefile	2012-01-21 16:40:14.037192481 -0700
@@ -30,6 +30,7 @@
 COBJS-$(CONFIG_MXC_GPIO)	+= mxc_gpio.o
 COBJS-$(CONFIG_PCA953X)		+= pca953x.o
 COBJS-$(CONFIG_S5P)		+= s5p_gpio.o
+COBJS-$(CONFIG_DAVINCI_GPIO)	+= davinci_gpio.o
 
 COBJS	:= $(COBJS-y)
 SRCS 	:= $(COBJS:.o=.c)

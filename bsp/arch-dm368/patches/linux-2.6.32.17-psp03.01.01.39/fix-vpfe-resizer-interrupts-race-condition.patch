Index: kernel/linux-2.6.32.17-psp03.01.01.39/drivers/char/dm365_ipipe.c
===================================================================
--- kernel.orig/linux-2.6.32.17-psp03.01.01.39/drivers/char/dm365_ipipe.c	2011-05-26 09:23:17.213111834 -0600
+++ kernel/linux-2.6.32.17-psp03.01.01.39/drivers/char/dm365_ipipe.c	2011-05-26 09:23:27.460553443 -0600
@@ -624,7 +624,7 @@
 static void ipipe_get_irq(struct irq_numbers *irq)
 {
 	irq->sdram = IRQ_PRVUINT;
-	irq->update = -1;
+	irq->update = 4;
 }
 
 static unsigned int ipipe_rsz_chain_state(void)
Index: kernel/linux-2.6.32.17-psp03.01.01.39/drivers/media/video/davinci/vpfe_capture.c
===================================================================
--- kernel.orig/linux-2.6.32.17-psp03.01.01.39/drivers/media/video/davinci/vpfe_capture.c	2011-05-26 09:23:17.213111834 -0600
+++ kernel/linux-2.6.32.17-psp03.01.01.39/drivers/media/video/davinci/vpfe_capture.c	2011-05-26 09:23:27.460553443 -0600
@@ -787,10 +787,6 @@
 		ccdc_dev->hw_ops.reset();
 
 	if (field == V4L2_FIELD_NONE) {
-		/* handle progressive frame capture */
-		if (vpfe_dev->cur_frm != vpfe_dev->next_frm)
-			vpfe_process_buffer_complete(vpfe_dev);
-
 		if (vpfe_dev->imp_chained) {
 			vpfe_dev->skip_frame_count--;
 			if (!vpfe_dev->skip_frame_count) {
@@ -802,6 +798,10 @@
 				if (imp_hw_if->enable_resize)
 					imp_hw_if->enable_resize(0);
 			}
+		} else {
+			if (vpfe_dev->cur_frm != vpfe_dev->next_frm)
+				vpfe_process_buffer_complete(vpfe_dev);
+		
 		}
 		return IRQ_HANDLED;
 	}
@@ -874,7 +874,7 @@
 static irqreturn_t vpfe_imp_dma_isr(int irq, void *dev_id)
 {
 	struct vpfe_device *vpfe_dev = dev_id;
-	int fid, schedule_capture = 0;
+	int fid;
 	enum v4l2_field field;
 
 	v4l2_dbg(1, debug, &vpfe_dev->v4l2_dev, "\nvpfe_imp_dma_isr\n");
@@ -886,24 +886,43 @@
 	field = vpfe_dev->fmt.fmt.pix.field;
 
 	if (field == V4L2_FIELD_NONE) {
-		if (!list_empty(&vpfe_dev->dma_queue) &&
-			vpfe_dev->cur_frm == vpfe_dev->next_frm)
-			schedule_capture = 1;
+		/* handle progressive frame capture */
+		if (vpfe_dev->cur_frm != vpfe_dev->next_frm)
+			vpfe_process_buffer_complete(vpfe_dev);
 	} else {
 		fid = ccdc_dev->hw_ops.getfid();
 
 		if (fid == vpfe_dev->field_id) {
 			/* we are in-sync here,continue */
 			if (fid == 1 && !list_empty(&vpfe_dev->dma_queue) &&
-			    vpfe_dev->cur_frm == vpfe_dev->next_frm)
-				schedule_capture = 1;
+			    vpfe_dev->cur_frm == vpfe_dev->next_frm) {
+				spin_lock(&vpfe_dev->dma_queue_lock);
+				vpfe_schedule_next_buffer(vpfe_dev);
+				spin_unlock(&vpfe_dev->dma_queue_lock);
+			}
 		}
 	}
-	if (schedule_capture) {
+
+	return IRQ_HANDLED;
+}
+
+static irqreturn_t vpfe_imp_update_isr(int irq, void *dev_id)
+{
+	struct vpfe_device *vpfe_dev = dev_id;
+
+	v4l2_dbg(1, debug, &vpfe_dev->v4l2_dev, "\nvpfe_imp_update_isr\n");
+
+	/* if streaming not started, don't do anything */
+	if (!vpfe_dev->started)
+		return IRQ_HANDLED;
+
+	if (!list_empty(&vpfe_dev->dma_queue) &&
+		vpfe_dev->cur_frm == vpfe_dev->next_frm) {
 		spin_lock(&vpfe_dev->dma_queue_lock);
 		vpfe_schedule_next_buffer(vpfe_dev);
 		spin_unlock(&vpfe_dev->dma_queue_lock);
 	}
+
 	return IRQ_HANDLED;
 }
 
@@ -916,14 +935,20 @@
 		frame_format = ccdc_dev->hw_ops.get_frame_format();
 		if (frame_format == CCDC_FRMFMT_PROGRESSIVE)
 			free_irq(vpfe_dev->ccdc_irq1, vpfe_dev);
-	} else
+	} else {
 		free_irq(vpfe_dev->imp_dma_irq, vpfe_dev);
+		if (vpfe_dev->imp_update_irq)
+			free_irq(vpfe_dev->imp_update_irq,vpfe_dev);
+	}
 }
 
 static int vpfe_attach_irq(struct vpfe_device *vpfe_dev)
 {
 	enum ccdc_frmfmt frame_format;
 	int ret;
+	enum v4l2_field field;
+	
+	vpfe_dev->imp_update_irq = 0;
 
 	ret = request_irq(vpfe_dev->ccdc_irq0, vpfe_isr, IRQF_DISABLED,
 			  "vpfe_capture0", vpfe_dev);
@@ -954,6 +979,19 @@
 		else
 			imp_hw_if->get_preview_irq(&irq_info);
 
+		field = vpfe_dev->fmt.fmt.pix.field;
+
+		if (field == V4L2_FIELD_NONE) {
+			vpfe_dev->imp_update_irq = irq_info.update;
+			ret = request_irq(irq_info.update, vpfe_imp_update_isr, IRQF_DISABLED,
+					  "Imp_Update_Irq", vpfe_dev);
+			if (ret < 0) {
+				v4l2_err(&vpfe_dev->v4l2_dev,
+					"Error: requesting VINT0 interrupt\n");
+				return ret;
+			}
+		}
+		
 		vpfe_dev->imp_dma_irq = irq_info.sdram;
 		ret = request_irq(irq_info.sdram,
 				  vpfe_imp_dma_isr,
Index: kernel/linux-2.6.32.17-psp03.01.01.39/drivers/media/video/davinci/vpss.c
===================================================================
--- kernel.orig/linux-2.6.32.17-psp03.01.01.39/drivers/media/video/davinci/vpss.c	2011-05-26 09:22:50.176545606 -0600
+++ kernel/linux-2.6.32.17-psp03.01.01.39/drivers/media/video/davinci/vpss.c	2011-05-26 09:23:27.460553443 -0600
@@ -627,7 +627,7 @@
 		/* INT0, INT1, AF */
 		isp5_write((isp5_read(0x10) | 0x0b1f0100), 0x10);
 		/* AEW, RSZ_INT_DMA */
-		isp5_write((isp5_read(0x14) | 0x1f0a0f1f), 0x14);
+		isp5_write((isp5_read(0x14) | 0x1f0a0f0d), 0x14);
 		/* VENC */
 		isp5_write((isp5_read(0x18) | 0x00000015), 0x18);
 		/* No event selected */
Index: kernel/linux-2.6.32.17-psp03.01.01.39/include/media/davinci/vpfe_capture.h
===================================================================
--- kernel.orig/linux-2.6.32.17-psp03.01.01.39/include/media/davinci/vpfe_capture.h	2011-05-26 09:22:50.192681774 -0600
+++ kernel/linux-2.6.32.17-psp03.01.01.39/include/media/davinci/vpfe_capture.h	2011-05-26 09:23:27.460553443 -0600
@@ -171,6 +171,8 @@
 	int std_index;
 	/* IRQ number for DMA transfer completion at the image processor */
 	unsigned int imp_dma_irq;
+	/* IRQ number for Update resizer imp registers */
+	unsigned int imp_update_irq;
 	/* CCDC IRQs used when CCDC/ISIF output to SDRAM */
 	unsigned int ccdc_irq0;
 	unsigned int ccdc_irq1;

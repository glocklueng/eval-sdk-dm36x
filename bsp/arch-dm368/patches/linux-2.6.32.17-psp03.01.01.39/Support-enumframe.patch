Index: kernel/linux-2.6.32.17-psp03.01.01.39/drivers/media/video/davinci/vpfe_capture.c
===================================================================
--- kernel.orig/linux-2.6.32.17-psp03.01.01.39/drivers/media/video/davinci/vpfe_capture.c	2011-02-23 12:17:43.059855622 -0600
+++ kernel/linux-2.6.32.17-psp03.01.01.39/drivers/media/video/davinci/vpfe_capture.c	2011-02-23 12:17:43.083977276 -0600
@@ -576,8 +576,10 @@
 
 static int vpfe_initialize_device(struct vpfe_device *vpfe_dev)
 {
+	struct vpfe_subdev_info *sdinfo;
 	int ret = 0;
 
+	sdinfo = vpfe_dev->current_subdev;
 	/* set first input of current subdevice as the current input */
 	vpfe_dev->current_input = 0;
 	/*
@@ -587,6 +589,10 @@
 	 */
 	if (vpfe_dev->current_subdev->is_camera) {
 		vpfe_dev->std_index = -1;
+		/* Set the bus/interface parameter for the sub device in ccdc */
+		ret = ccdc_dev->hw_ops.set_hw_if_params(&sdinfo->ccdc_if_params);
+		if (ret)
+			goto unlock_out;
 		/*
 		 * Configure the vpfe default format information based on ccdc
 		 * defaults
@@ -644,6 +650,7 @@
 		(imp_hw_if->get_preview_oper_mode() == IMP_MODE_CONTINUOUS)) {
 		if (imp_hw_if->get_previewer_config_state()
 			== STATE_CONFIGURED) {
+			//v4l2_dbg(1, debug, &vpfe_dev->v4l2_dev, "IPIPE Chained\n");
 			v4l2_info(&vpfe_dev->v4l2_dev, "IPIPE Chained\n");
 			vpfe_dev->imp_chained = 1;
 			vpfe_dev->out_from = VPFE_IMP_PREV_OUT;
@@ -1258,7 +1265,7 @@
 
 	min_width /= vpfe_pix_fmt->bpp;
 
-	v4l2_info(&vpfe_dev->v4l2_dev, "width = %d, height = %d, bpp = %d\n",
+	v4l2_dbg(1, debug, &vpfe_dev->v4l2_dev, "width = %d, height = %d, bpp = %d\n",
 		  pixfmt->width, pixfmt->height, vpfe_pix_fmt->bpp);
 
 	pixfmt->width = clamp((pixfmt->width), min_width, max_width);
@@ -1280,7 +1287,7 @@
 	else
 		pixfmt->sizeimage = pixfmt->bytesperline * pixfmt->height;
 
-	v4l2_info(&vpfe_dev->v4l2_dev, "adjusted width = %d, height ="
+	v4l2_dbg(1, debug, &vpfe_dev->v4l2_dev, "adjusted width = %d, height ="
 		 " %d, bpp = %d, bytesperline = %d, sizeimage = %d\n",
 		 pixfmt->width, pixfmt->height, vpfe_pix_fmt->bpp,
 		 pixfmt->bytesperline, pixfmt->sizeimage);
@@ -1609,7 +1616,7 @@
 					&subdev,
 					&index,
 					inp->index) < 0) {
-		v4l2_err(&vpfe_dev->v4l2_dev, "input information not found"
+		v4l2_dbg(1, debug, &vpfe_dev->v4l2_dev, "input information not found"
 			 " for the subdev\n");
 		return -EINVAL;
 	}
@@ -1804,7 +1811,7 @@
 
 	if (vpfe_dev->std_index < 0 ||
 	    vpfe_dev->std_index >= ARRAY_SIZE(vpfe_standards)) {
-		v4l2_err(&vpfe_dev->v4l2_dev, "Standard not supported\n");
+		v4l2_dbg(1, debug, &vpfe_dev->v4l2_dev, "Standard not supported\n");
 		return -EINVAL;
 	}
 	*std_id = vpfe_standards[vpfe_dev->std_index].std_id;
@@ -2478,6 +2485,58 @@
 	return 0;
 }
 
+static int vpfe_enum_framesizes(struct file *file, void *priv,
+				struct v4l2_frmsizeenum *frms)
+{
+	struct vpfe_device *vpfe_dev = video_drvdata(file);
+	struct vpfe_subdev_info *sdinfo;
+	u32 pixel_format;
+	int ret = -EINVAL;
+
+	v4l2_dbg(1, debug, &vpfe_dev->v4l2_dev, "vpfe_enum_framesizes\n");
+	sdinfo = vpfe_dev->current_subdev;
+
+	mutex_lock(&vpfe_dev->lock);
+
+	if (sdinfo->is_camera) {
+		/* Assume the sensor supports V4L2_PIX_FMT_SGRBG10*/
+		pixel_format = frms->pixel_format;
+		frms->pixel_format = V4L2_PIX_FMT_SGRBG10;
+		ret = v4l2_device_call_until_err(&vpfe_dev->v4l2_dev,
+			sdinfo->grp_id, video, enum_framesizes, frms);
+		frms->pixel_format = pixel_format;
+	}
+
+	mutex_unlock(&vpfe_dev->lock);
+	return ret;
+}
+
+static int vpfe_enum_frameintervals(struct file *file, void *priv,
+				struct v4l2_frmivalenum *frmi)
+{
+	struct vpfe_device *vpfe_dev = video_drvdata(file);
+	struct vpfe_subdev_info *sdinfo;
+	u32 pixel_format;
+	int ret = -EINVAL;
+
+	v4l2_dbg(1, debug, &vpfe_dev->v4l2_dev, "vpfe_enum_frameintervals\n");
+	sdinfo = vpfe_dev->current_subdev;
+
+	mutex_lock(&vpfe_dev->lock);
+
+	if (sdinfo->is_camera) {
+		/* Assume the sensor supports V4L2_PIX_FMT_SGRBG10*/
+		pixel_format = frmi->pixel_format;
+		frmi->pixel_format = V4L2_PIX_FMT_SGRBG10;
+		ret = v4l2_device_call_until_err(&vpfe_dev->v4l2_dev,
+			sdinfo->grp_id, video, enum_frameintervals, frmi);
+		frmi->pixel_format = pixel_format;
+	}
+
+	mutex_unlock(&vpfe_dev->lock);
+	return ret;
+}
+
 /* vpfe capture ioctl operations */
 static const struct v4l2_ioctl_ops vpfe_ioctl_ops = {
 	.vidioc_querycap	 = vpfe_querycap,
@@ -2505,6 +2564,8 @@
 	.vidioc_s_crop		 = vpfe_s_crop,
 	.vidioc_s_parm		 = vpfe_s_parm,
 	.vidioc_g_parm		 = vpfe_g_parm,
+	.vidioc_enum_framesizes	 = vpfe_enum_framesizes,
+	.vidioc_enum_frameintervals = vpfe_enum_frameintervals,
 };
 
 static struct vpfe_device *vpfe_initialize(void)
